{"ast":null,"code":"import _defineProperty from \"C:/Users/matth/donate/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"C:/Users/matth/donate/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\matth\\\\donate\\\\pages\\\\_app.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n          \", \";\\n          ::selection {\\n            background-color: #90CDF4;\\n            color: #fefefe;\\n          }\\n          ::-moz-selection {\\n            background: #ffb7b7;\\n            color: #fefefe;\\n          }\\n          html {\\n            min-width: 356px;\\n            scroll-behavior: smooth;\\n          }\\n          #__next {\\n            display: flex;\\n            flex-direction: column;\\n            min-height: 100vh;\\n            background: \", \";\\n          }\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { ChakraProvider, ColorModeProvider, useColorMode } from '@chakra-ui/react';\nimport customTheme from '../styles/theme';\nimport { Global, css } from '@emotion/react';\nimport { prismLightTheme, prismDarkTheme } from '../styles/prism';\n\nvar GlobalStyle = function GlobalStyle(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Global, {\n      styles: css(_templateObject(), colorMode === 'light' ? prismLightTheme : prismDarkTheme, colorMode === 'light' ? 'white' : '#171717')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this), children]\n  }, void 0, true);\n};\n\n_s(GlobalStyle, \"2Uu86IH3do63pkN3s1ysdRMmJuc=\", false, function () {\n  return [useColorMode];\n});\n\n_c = GlobalStyle;\n\nfunction MyApp(_ref2) {\n  var Component = _ref2.Component,\n      pageProps = _ref2.pageProps;\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    resetCSS: true,\n    theme: customTheme,\n    children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n      options: {\n        initialColorMode: \"light\",\n        useSystemColorMode: true\n      },\n      children: /*#__PURE__*/_jsxDEV(GlobalStyle, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = MyApp;\nexport default MyApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalStyle\");\n$RefreshReg$(_c2, \"MyApp\");","map":{"version":3,"sources":["C:/Users/matth/donate/pages/_app.tsx"],"names":["React","ChakraProvider","ColorModeProvider","useColorMode","customTheme","Global","css","prismLightTheme","prismDarkTheme","GlobalStyle","children","colorMode","MyApp","Component","pageProps","initialColorMode","useSystemColorMode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,YAA5C,QAAgE,kBAAhE;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,gBAA5B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,iBAAhD;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,sBACdP,YAAY,EADE;AAAA,MAC5BQ,SAD4B,iBAC5BA,SAD4B;;AAGpC,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,MAAM,EAAEL,GAAF,oBACFK,SAAS,KAAK,OAAd,GAAwBJ,eAAxB,GAA0CC,cADxC,EAkBYG,SAAS,KAAK,OAAd,GAAwB,OAAxB,GAAkC,SAlB9C;AADR;AAAA;AAAA;AAAA;AAAA,aADF,EAwBGD,QAxBH;AAAA,kBADF;AA4BD,CA/BD;;GAAMD,W;UACkBN,Y;;;KADlBM,W;;AAiCN,SAASG,KAAT,QAAyC;AAAA,MAAxBC,SAAwB,SAAxBA,SAAwB;AAAA,MAAbC,SAAa,SAAbA,SAAa;AACvC,sBACE,QAAC,cAAD;AAAgB,IAAA,QAAQ,MAAxB;AAAyB,IAAA,KAAK,EAAEV,WAAhC;AAAA,2BACE,QAAC,iBAAD;AACE,MAAA,OAAO,EAAE;AACPW,QAAAA,gBAAgB,EAAE,OADX;AAEPC,QAAAA,kBAAkB,EAAE;AAFb,OADX;AAAA,6BAME,QAAC,WAAD;AAAA,+BACE,QAAC,SAAD,oBAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;MAfQF,K;AAiBT,eAAeA,KAAf","sourcesContent":["import React from 'react'\r\nimport { ChakraProvider, ColorModeProvider, useColorMode } from '@chakra-ui/react'\r\nimport customTheme from '../styles/theme'\r\nimport { Global, css } from '@emotion/react'\r\nimport { prismLightTheme, prismDarkTheme } from '../styles/prism'\r\n\r\nconst GlobalStyle = ({ children }) => {\r\n  const { colorMode } = useColorMode()\r\n\r\n  return (\r\n    <>\r\n      <Global\r\n        styles={css`\r\n          ${colorMode === 'light' ? prismLightTheme : prismDarkTheme};\r\n          ::selection {\r\n            background-color: #90CDF4;\r\n            color: #fefefe;\r\n          }\r\n          ::-moz-selection {\r\n            background: #ffb7b7;\r\n            color: #fefefe;\r\n          }\r\n          html {\r\n            min-width: 356px;\r\n            scroll-behavior: smooth;\r\n          }\r\n          #__next {\r\n            display: flex;\r\n            flex-direction: column;\r\n            min-height: 100vh;\r\n            background: ${colorMode === 'light' ? 'white' : '#171717'};\r\n          }\r\n        `}\r\n      />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return (\r\n    <ChakraProvider resetCSS theme={customTheme}>\r\n      <ColorModeProvider\r\n        options={{\r\n          initialColorMode: \"light\",\r\n          useSystemColorMode: true,\r\n        }}\r\n      >\r\n        <GlobalStyle>\r\n          <Component {...pageProps} />\r\n        </GlobalStyle>\r\n      </ColorModeProvider>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default MyApp"]},"metadata":{},"sourceType":"module"}