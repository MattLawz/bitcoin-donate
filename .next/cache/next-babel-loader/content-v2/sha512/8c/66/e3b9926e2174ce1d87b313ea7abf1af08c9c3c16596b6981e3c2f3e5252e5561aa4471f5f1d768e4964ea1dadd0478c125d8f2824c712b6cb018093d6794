{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\matth\\\\donate\\\\pages\\\\_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ChakraProvider, ColorModeProvider, useColorMode } from '@chakra-ui/react';\nimport customTheme from '../styles/theme';\nimport { Global, css } from '@emotion/react';\n\nconst GlobalStyle = ({\n  children\n}) => {\n  const {\n    colorMode\n  } = useColorMode();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Global, {\n      styles: css`\n          ${colorMode === 'light' ? prismLightTheme : prismDarkTheme};\n          ::selection {\n            background-color: #90CDF4;\n            color: #fefefe;\n          }\n          ::-moz-selection {\n            background: #ffb7b7;\n            color: #fefefe;\n          }\n          html {\n            min-width: 356px;\n            scroll-behavior: smooth;\n          }\n          #__next {\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            background: ${colorMode === 'light' ? 'white' : '#171717'};\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true);\n};\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    resetCSS: true,\n    theme: customTheme,\n    children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n      options: {\n        initialColorMode: \"light\",\n        useSystemColorMode: true\n      },\n      children: /*#__PURE__*/_jsxDEV(GlobalStyle, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/matth/donate/pages/_app.tsx"],"names":["React","ChakraProvider","ColorModeProvider","useColorMode","customTheme","Global","css","GlobalStyle","children","colorMode","prismLightTheme","prismDarkTheme","MyApp","Component","pageProps","initialColorMode","useSystemColorMode"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,YAA5C,QAAgE,kBAAhE;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,gBAA5B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAgBN,YAAY,EAAlC;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,MAAM,EAAEG,GAAI;AACpB,YAAYG,SAAS,KAAK,OAAd,GAAwBC,eAAxB,GAA0CC,cAAe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0BF,SAAS,KAAK,OAAd,GAAwB,OAAxB,GAAkC,SAAU;AACtE;AACA;AArBM;AAAA;AAAA;AAAA;AAAA,YADF,EAwBGD,QAxBH;AAAA,kBADF;AA4BD,CA/BD;;AAiCA,SAASI,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,sBACE,QAAC,cAAD;AAAgB,IAAA,QAAQ,MAAxB;AAAyB,IAAA,KAAK,EAAEV,WAAhC;AAAA,2BACE,QAAC,iBAAD;AACE,MAAA,OAAO,EAAE;AACPW,QAAAA,gBAAgB,EAAE,OADX;AAEPC,QAAAA,kBAAkB,EAAE;AAFb,OADX;AAAA,6BAME,QAAC,WAAD;AAAA,+BACE,QAAC,SAAD,oBAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;AAED,eAAeF,KAAf","sourcesContent":["import React from 'react'\r\nimport { ChakraProvider, ColorModeProvider, useColorMode } from '@chakra-ui/react'\r\nimport customTheme from '../styles/theme'\r\nimport { Global, css } from '@emotion/react'\r\n\r\nconst GlobalStyle = ({ children }) => {\r\n  const { colorMode } = useColorMode()\r\n\r\n  return (\r\n    <>\r\n      <Global\r\n        styles={css`\r\n          ${colorMode === 'light' ? prismLightTheme : prismDarkTheme};\r\n          ::selection {\r\n            background-color: #90CDF4;\r\n            color: #fefefe;\r\n          }\r\n          ::-moz-selection {\r\n            background: #ffb7b7;\r\n            color: #fefefe;\r\n          }\r\n          html {\r\n            min-width: 356px;\r\n            scroll-behavior: smooth;\r\n          }\r\n          #__next {\r\n            display: flex;\r\n            flex-direction: column;\r\n            min-height: 100vh;\r\n            background: ${colorMode === 'light' ? 'white' : '#171717'};\r\n          }\r\n        `}\r\n      />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return (\r\n    <ChakraProvider resetCSS theme={customTheme}>\r\n      <ColorModeProvider\r\n        options={{\r\n          initialColorMode: \"light\",\r\n          useSystemColorMode: true,\r\n        }}\r\n      >\r\n        <GlobalStyle>\r\n          <Component {...pageProps} />\r\n        </GlobalStyle>\r\n      </ColorModeProvider>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default MyApp"]},"metadata":{},"sourceType":"module"}